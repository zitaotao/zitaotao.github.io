{"pages":[{"title":"","text":"喜欢技术的小菜鸡","link":"/about/index.html"}],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2021/07/29/hello-world/"},{"title":"Flink学习笔记-时间与窗口","text":"时间推理工具——批流统一的关键时间类型在Flink中定义了三种时间类型 事件时间（Event Time）事件时间指事件发生时的时间，一旦确定之后再也不会改变。 处理时间（ProcessingTime）处理时间指数据被Flink处理的时间。 摄取时间（Ingestion Time）摄取时间指数据被Flink读取的时间。 3种时间类型如图所示 举例说明例如监控系统实时处理线上7层负载的日志，计算任务从kafka读取数据的时间就是摄取时间，数据被Flink算子处理的时间就是处理时间，如果一个Task由多个算子组成，处理时间会随着算子的运行不断改变，然后日志数据中记录的时间就是事件时间。 窗口类型在Flink中由三种窗口类型 计数窗口（Count Window） 时间窗口（Time Window） 会话窗口（SessionWindow）窗口移动方式在Flink中由三种窗口移动的方式 滑动 滚动 对话移动 不同类型的窗口及其移动示例如图所示。 解释 Count Window Tumble Count Window：累积固定个数的元素就视为一个窗口，数量到达后生成新的窗口。上图中窗口大小为4，当数据9，6，8，4分别进入窗口后，系统会生成新的窗口用于接受后续的7，3，2，1。以此类推。该类型的窗口无法像时间窗口一样事先切分好。 Sliding Count Window：累积固定个数的元素视为一个窗口，每超过一定个数的原则个数，则产生一个新的窗口。上图中窗口大小为4，滑动步长为2，当数据9，6，8，4分别进入窗口后，系统会生成新的窗口，窗口向前滑动2，新的窗口中包含8，4两条记录，滑动完成后新的窗口将接受后续到达的7，3。以此类推。窗口之间会相互重叠。 Time Window Tumble Time Window：表示在时间上按照事先约定的窗口大小切分的窗口，窗口开放指定时间后生成新的窗口。上图窗口大小为1分钟，一分钟内9，6分别进入窗口，1一分钟时间到达后生成新的窗口用于接收下一分钟到达的8，4，7。以此类推。窗口之间不会相互重叠。 Sliding Time Window：表示在时间上按照事先约定的窗口大小、滑动步长切分的窗口。上图中窗口大小为一分钟，滑动步长为0.5钟，第一分钟9，6到达窗口，生成新的窗口并向前滑动0.5分钟用于接口后续数据，8，4在后续0.5分钟内进入窗口。4进入二窗口后生成第三个窗口并向前滑动，第三个窗口中包含8，4。以此类推。窗口之间会相互重叠。 session窗口 Session Window是一种特殊的窗口，当超过一段时间，该窗口没有收到新的数据元素，则视为该窗口结束。此类窗口无法事先确定窗口的长度、元数个数，窗口之间也不会相互重叠。 实践123456789101112131415mainStream .flatMap(new TLBLogFlatMapFunction()) .setParallelism(CONFIG.getParallelism().getFlatMapThread()) .uid(&quot;tlb_flatmap_01&quot;) .name(&quot;tlb_flatmap_01&quot;) .keyBy(new UrlKeySelector()) .window(ProcessingTimeSessionWindows.withGap(Time.seconds(5))) .aggregate(new UrlAggregationFunction(),new UrlWindowFunction()) .setParallelism(CONFIG.getParallelism().getClickHouseWindowThread()) .uid(&quot;tlb_window&quot;) .addSink(new ClickHouseSink()) .name(&quot;clickHouse_sink&quot;) .uid(&quot;clickHouse_sink&quot;) .setParallelism(CONFIG.getParallelism().getClickHouseSinkThread());","link":"/2021/07/30/Flink%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%97%B6%E9%97%B4%E4%B8%8E%E7%AA%97%E5%8F%A3/"}],"tags":[{"name":"Flink","slug":"Flink","link":"/tags/Flink/"}],"categories":[]}